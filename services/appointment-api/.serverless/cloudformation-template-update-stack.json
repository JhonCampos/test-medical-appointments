{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "AppointmentHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-api-dev-appointmentHandler"
      }
    },
    "SwaggerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-api-dev-swagger"
      }
    },
    "SwaggerSpecLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-api-dev-swaggerSpec"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "appointment-api",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appointment-api-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appointment-api-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "AppointmentsCompletionQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "appointment-api",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AppointmentHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-91b3aea6-42e2",
          "S3Key": "serverless/appointment-api/dev/1755825371809-2025-08-22T01:16:11.809Z/appointment-api-appointmentHandler.zip"
        },
        "Handler": "src/handlers/appointment.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "appointment-api-dev-appointmentHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "app-id",
            "Value": "test-medical-appoinments"
          },
          {
            "Key": "app-center-cost",
            "Value": "test-medical-appoinments"
          },
          {
            "Key": "app-env",
            "Value": "test"
          }
        ],
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE_APPOINTMENTS": "appointments-table-dev",
            "SNS_TOPIC_APPOINTMENTS_ARN": {
              "Ref": "AppointmentsTopic"
            },
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentHandlerLogGroup"
      ]
    },
    "SwaggerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-91b3aea6-42e2",
          "S3Key": "serverless/appointment-api/dev/1755825371809-2025-08-22T01:16:11.809Z/appointment-api-swagger.zip"
        },
        "Handler": "src/handlers/swagger.ui",
        "Runtime": "nodejs20.x",
        "FunctionName": "appointment-api-dev-swagger",
        "MemorySize": 1024,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "app-id",
            "Value": "test-medical-appoinments"
          },
          {
            "Key": "app-center-cost",
            "Value": "test-medical-appoinments"
          },
          {
            "Key": "app-env",
            "Value": "test"
          }
        ],
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE_APPOINTMENTS": "appointments-table-dev",
            "SNS_TOPIC_APPOINTMENTS_ARN": {
              "Ref": "AppointmentsTopic"
            },
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SwaggerLogGroup"
      ]
    },
    "SwaggerSpecLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-91b3aea6-42e2",
          "S3Key": "serverless/appointment-api/dev/1755825371809-2025-08-22T01:16:11.809Z/appointment-api-swaggerSpec.zip"
        },
        "Handler": "src/handlers/swagger.spec",
        "Runtime": "nodejs20.x",
        "FunctionName": "appointment-api-dev-swaggerSpec",
        "MemorySize": 1024,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "app-id",
            "Value": "test-medical-appoinments"
          },
          {
            "Key": "app-center-cost",
            "Value": "test-medical-appoinments"
          },
          {
            "Key": "app-env",
            "Value": "test"
          }
        ],
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE_APPOINTMENTS": "appointments-table-dev",
            "SNS_TOPIC_APPOINTMENTS_ARN": {
              "Ref": "AppointmentsTopic"
            },
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SwaggerSpecLogGroup"
      ]
    },
    "SwaggerSpecLambdaVersionnZpb9gvJTpjYZtTjxMaB5Gb75B4SXmwUy0wbY6KY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SwaggerSpecLambdaFunction"
        },
        "CodeSha256": "jkyY3AigTO3xOCWc9o6Dqz2qm50V8GoMfAxtsswHYKk="
      }
    },
    "SwaggerLambdaVersion7rASq7wp8Nonmk8pfP1OIP3Kg8Xj13abTm2NaXXIY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SwaggerLambdaFunction"
        },
        "CodeSha256": "jkyY3AigTO3xOCWc9o6Dqz2qm50V8GoMfAxtsswHYKk="
      }
    },
    "AppointmentHandlerLambdaVersionJZhFkguvEcSoDZKsLFNIoNXqPHYuqTgGA4qFK0Zt2Fc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentHandlerLambdaFunction"
        },
        "CodeSha256": "z6lpowJ3q1kmR+QwFmqN3HgTDlq6zxQBdBpFxP/bQ4E="
      }
    },
    "AppointmentHandlerEventSourceMappingSQSAppointmentsCompletionQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "AppointmentsCompletionQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-appointment-api",
        "ProtocolType": "HTTP",
        "Tags": {
          "app-id": "test-medical-appoinments",
          "app-center-cost": "test-medical-appoinments",
          "app-env": "test"
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        },
        "Tags": {
          "app-id": "test-medical-appoinments",
          "app-center-cost": "test-medical-appoinments",
          "app-env": "test"
        }
      }
    },
    "AppointmentHandlerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAppointmentHandler": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AppointmentHandlerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAppointments": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /appointments",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAppointmentHandler"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAppointmentHandler"
    },
    "HttpApiRouteGetAppointmentsInsuredidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /appointments/{insuredId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAppointmentHandler"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAppointmentHandler"
    },
    "SwaggerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SwaggerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSwagger": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SwaggerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDocs": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /docs",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSwagger"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSwagger"
    },
    "HttpApiRouteGetDocsProxyVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /docs/{proxy+}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSwagger"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSwagger"
    },
    "SwaggerSpecLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SwaggerSpecLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSwaggerSpec": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SwaggerSpecLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetOpenapiyaml": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /openapi.yaml",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSwaggerSpec"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSwaggerSpec"
    },
    "AppointmentsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "appointments-table-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "insuredId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "appointmentId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "insuredId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "appointmentId",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "AppointmentsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "appointments-topic-dev"
      }
    },
    "AppointmentsQueuePE": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "appointments-queue-pe-dev"
      }
    },
    "AppointmentsQueueCL": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "appointments-queue-cl-dev"
      }
    },
    "SnsSubscriptionPE": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "AppointmentsQueuePE",
            "Arn"
          ]
        },
        "TopicArn": {
          "Ref": "AppointmentsTopic"
        },
        "FilterPolicy": {
          "countryISO": [
            "PE"
          ]
        },
        "RawMessageDelivery": "true"
      }
    },
    "SnsSubscriptionCL": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "AppointmentsQueueCL",
            "Arn"
          ]
        },
        "TopicArn": {
          "Ref": "AppointmentsTopic"
        },
        "FilterPolicy": {
          "countryISO": [
            "CL"
          ]
        },
        "RawMessageDelivery": "true"
      }
    },
    "SqsPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "AppointmentsQueuePE"
          },
          {
            "Ref": "AppointmentsQueueCL"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": "sqs:SendMessage",
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "AppointmentsTopic"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "AppointmentEventBus": {
      "Type": "AWS::Events::EventBus",
      "Properties": {
        "Name": "appointment-event-bus-dev"
      }
    },
    "AppointmentsCompletionQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "appointments-completion-queue-dev"
      }
    },
    "EventBusToSqsRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventBusName": {
          "Ref": "AppointmentEventBus"
        },
        "EventPattern": {
          "source": [
            "appointment.processor"
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AppointmentsCompletionQueue",
                "Arn"
              ]
            },
            "Id": "CompletionQueueTarget"
          }
        ]
      }
    },
    "EventBridgeToSqsPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "AppointmentsCompletionQueue"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sqs:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "AppointmentsCompletionQueue",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-2-91b3aea6-42e2",
      "Export": {
        "Name": "sls-appointment-api-dev-ServerlessDeploymentBucketName"
      }
    },
    "SwaggerSpecLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SwaggerSpecLambdaVersionnZpb9gvJTpjYZtTjxMaB5Gb75B4SXmwUy0wbY6KY"
      },
      "Export": {
        "Name": "sls-appointment-api-dev-SwaggerSpecLambdaFunctionQualifiedArn"
      }
    },
    "SwaggerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SwaggerLambdaVersion7rASq7wp8Nonmk8pfP1OIP3Kg8Xj13abTm2NaXXIY"
      },
      "Export": {
        "Name": "sls-appointment-api-dev-SwaggerLambdaFunctionQualifiedArn"
      }
    },
    "AppointmentHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentHandlerLambdaVersionJZhFkguvEcSoDZKsLFNIoNXqPHYuqTgGA4qFK0Zt2Fc"
      },
      "Export": {
        "Name": "sls-appointment-api-dev-AppointmentHandlerLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-appointment-api-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-appointment-api-dev-HttpApiUrl"
      }
    }
  }
}