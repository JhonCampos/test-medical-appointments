service: appointment-processor

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'aivoxia'}
  # Añadimos tags que se aplicarán a todos los recursos de la stack
  tags:
    app-id: test-medical-appoinments
    app-center-cost: test-medical-appoinments
    app-env: test
  environment:
    EVENT_BUS_NAME: appointment-event-bus-${self:provider.stage}
    # Estas variables deben ser configuradas de forma segura (ej. SSM Parameter Store o .env)
    #RDS_HOST: ${env:RDS_HOST}
    #RDS_USER: ${env:RDS_USER}
    #RDS_PASSWORD: ${env:RDS_PASSWORD}
    #RDS_DATABASE: ${env:RDS_DATABASE}

package:
  individually: true

functions:
  processPE:
    # Apuntamos al nuevo handler para Perú
    handler: src/handlers/processPE.handler
    events:
      - sqs:
          arn:
            Fn::Join:
              - ":"
              - - "arn:aws:sqs"
                - ${self:provider.region}
                - { Ref: "AWS::AccountId" }
                - "appointments-queue-pe-${self:provider.stage}"

  processCL:
    # Apuntamos al nuevo handler para Chile
    handler: src/handlers/processCL.handler
    events:
      - sqs:
          arn:
            Fn::Join:
              - ":"
              - - "arn:aws:sqs"
                - ${self:provider.region}
                - { Ref: "AWS::AccountId" }
                - "appointments-queue-cl-${self:provider.stage}"

# NOTA: En un proyecto real, se definirían aquí los permisos IAM explícitos
# para que los lambdas puedan acceder a SQS, RDS (VPC) y EventBridge.